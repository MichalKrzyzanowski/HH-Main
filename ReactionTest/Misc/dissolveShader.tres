[gd_resource type="VisualShader" load_steps=14 format=2]

[ext_resource path="res://ShaderTextures/noise.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarFunc" id=9]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=11]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
function = 15

[sub_resource type="VisualShaderNodeVectorOp" id=13]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=14]
uniform_name = "DissolveColor"

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=4]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=8]
output_port_for_preview = 0
operator = 1

[resource]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_frg_7;
uniform vec4 DissolveColor : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out2p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// Input:3
	float n_out3p0 = TIME;

// ScalarFunc:4
	float n_out4p0 = sin(n_out3p0);

// ScalarOp:5
	float n_in5p1 = 2.00000;
	float n_out5p0 = n_out4p0 / n_in5p1;

// ScalarOp:9
	float n_out9p0 = dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)) - n_out5p0;

// ScalarFunc:10
	float n_out10p0 = round(n_out9p0);

// ScalarOp:11
	float n_in11p1 = 0.05000;
	float n_out11p0 = n_out9p0 - n_in11p1;

// ScalarOp:12
	float n_in12p0 = 1.00000;
	float n_out12p0 = n_in12p0 - n_out11p0;

// ScalarFunc:13
	float n_out13p0 = round(n_out12p0);

// ColorUniform:15
	vec3 n_out15p0 = DissolveColor.rgb;
	float n_out15p1 = DissolveColor.a;

// VectorOp:14
	vec3 n_out14p0 = vec3(n_out13p0) * n_out15p0;

// Output:0
	ALPHA = n_out10p0;
	EMISSION = n_out14p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, 225 )
modes/cull = 2
modes/depth_draw = 3
nodes/fragment/0/position = Vector2( 1760, 180 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 240, 160 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -160, 360 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 40, 360 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 240, 360 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 460, 120 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 660, 400 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( 920, 200 )
nodes/fragment/11/node = SubResource( 10 )
nodes/fragment/11/position = Vector2( 900, 420 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( 1080, 420 )
nodes/fragment/13/node = SubResource( 12 )
nodes/fragment/13/position = Vector2( 1280, 420 )
nodes/fragment/14/node = SubResource( 13 )
nodes/fragment/14/position = Vector2( 1500, 380 )
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( 1240, 560 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 5, 0, 2, 0, 7, 0, 7, 0, 9, 0, 9, 0, 10, 0, 5, 0, 9, 1, 10, 0, 0, 1, 9, 0, 11, 0, 11, 0, 12, 1, 12, 0, 13, 0, 13, 0, 14, 0, 15, 0, 14, 1, 14, 0, 0, 5 )
